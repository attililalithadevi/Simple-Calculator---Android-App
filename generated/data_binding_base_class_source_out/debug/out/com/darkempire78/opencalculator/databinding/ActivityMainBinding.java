// Generated by view binder compiler. Do not edit!
package com.darkempire78.opencalculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.Space;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.darkempire78.opencalculator.R;
import com.sothree.slidinguppanel.SlidingUpPanelLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addButton;

  @NonNull
  public final ImageButton backspaceButton;

  @NonNull
  public final Button clearButton;

  @NonNull
  public final ConstraintLayout constraintLayout2;

  @NonNull
  public final ConstraintLayout constraintLayout3;

  @NonNull
  public final Button cosineButton;

  @NonNull
  public final Button degreeButton;

  @NonNull
  public final TextView degreeTextView;

  @NonNull
  public final Button divideButton;

  @NonNull
  public final Button divideBy100Button;

  @NonNull
  public final Button eButton;

  @NonNull
  public final Button eightButton;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-sw720dp-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Space emptyScientistMode1;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-sw720dp-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Space emptyScientistMode2;

  @NonNull
  public final Button equalsButton;

  @NonNull
  public final ImageButton exponentButton;

  @NonNull
  public final Button factorialButton;

  @NonNull
  public final Button fiveButton;

  @NonNull
  public final Button fourButton;

  @NonNull
  public final Guideline guideline1;

  @NonNull
  public final Guideline guideline2;

  @NonNull
  public final RecyclerView historyRecylcleView;

  @NonNull
  public final EditText input;

  @NonNull
  public final HorizontalScrollView inputHorizontalScrollView;

  @NonNull
  public final Button invButton;

  @NonNull
  public final Button leftParenthesisButton;

  @NonNull
  public final Button logarithmButton;

  @NonNull
  public final ConstraintLayout mainConstraintLayout;

  @NonNull
  public final ImageButton menuButton;

  @NonNull
  public final Button multiplyButton;

  @NonNull
  public final Button naturalLogarithmButton;

  @NonNull
  public final Button nineButton;

  @NonNull
  public final Button oneButton;

  @NonNull
  public final Button parenthesesButton;

  @NonNull
  public final Button piButton;

  @NonNull
  public final ImageButton pointButton;

  @NonNull
  public final TextView resultDisplay;

  @NonNull
  public final HorizontalScrollView resultDisplayHorizontalScrollView;

  @NonNull
  public final Button rightParenthesisButton;

  @NonNull
  public final TableRow scientistModeRow2;

  @NonNull
  public final TableRow scientistModeRow3;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-sw720dp-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageButton scientistModeSwitchButton;

  @NonNull
  public final Button sevenButton;

  @NonNull
  public final Button sineButton;

  @NonNull
  public final Button sixButton;

  @NonNull
  public final SlidingUpPanelLayout slidingLayout;

  @NonNull
  public final View slidingLayoutButton;

  @NonNull
  public final Button squareButton;

  @NonNull
  public final Button subtractButton;

  @NonNull
  public final TableLayout tableLayout;

  @NonNull
  public final Button tangentButton;

  @NonNull
  public final Button threeButton;

  @NonNull
  public final View topBackground;

  @NonNull
  public final Button twoButton;

  @NonNull
  public final Button zeroButton;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button addButton,
      @NonNull ImageButton backspaceButton, @NonNull Button clearButton,
      @NonNull ConstraintLayout constraintLayout2, @NonNull ConstraintLayout constraintLayout3,
      @NonNull Button cosineButton, @NonNull Button degreeButton, @NonNull TextView degreeTextView,
      @NonNull Button divideButton, @NonNull Button divideBy100Button, @NonNull Button eButton,
      @NonNull Button eightButton, @Nullable Space emptyScientistMode1,
      @Nullable Space emptyScientistMode2, @NonNull Button equalsButton,
      @NonNull ImageButton exponentButton, @NonNull Button factorialButton,
      @NonNull Button fiveButton, @NonNull Button fourButton, @NonNull Guideline guideline1,
      @NonNull Guideline guideline2, @NonNull RecyclerView historyRecylcleView,
      @NonNull EditText input, @NonNull HorizontalScrollView inputHorizontalScrollView,
      @NonNull Button invButton, @NonNull Button leftParenthesisButton,
      @NonNull Button logarithmButton, @NonNull ConstraintLayout mainConstraintLayout,
      @NonNull ImageButton menuButton, @NonNull Button multiplyButton,
      @NonNull Button naturalLogarithmButton, @NonNull Button nineButton, @NonNull Button oneButton,
      @NonNull Button parenthesesButton, @NonNull Button piButton, @NonNull ImageButton pointButton,
      @NonNull TextView resultDisplay,
      @NonNull HorizontalScrollView resultDisplayHorizontalScrollView,
      @NonNull Button rightParenthesisButton, @NonNull TableRow scientistModeRow2,
      @NonNull TableRow scientistModeRow3, @Nullable ImageButton scientistModeSwitchButton,
      @NonNull Button sevenButton, @NonNull Button sineButton, @NonNull Button sixButton,
      @NonNull SlidingUpPanelLayout slidingLayout, @NonNull View slidingLayoutButton,
      @NonNull Button squareButton, @NonNull Button subtractButton,
      @NonNull TableLayout tableLayout, @NonNull Button tangentButton, @NonNull Button threeButton,
      @NonNull View topBackground, @NonNull Button twoButton, @NonNull Button zeroButton) {
    this.rootView = rootView;
    this.addButton = addButton;
    this.backspaceButton = backspaceButton;
    this.clearButton = clearButton;
    this.constraintLayout2 = constraintLayout2;
    this.constraintLayout3 = constraintLayout3;
    this.cosineButton = cosineButton;
    this.degreeButton = degreeButton;
    this.degreeTextView = degreeTextView;
    this.divideButton = divideButton;
    this.divideBy100Button = divideBy100Button;
    this.eButton = eButton;
    this.eightButton = eightButton;
    this.emptyScientistMode1 = emptyScientistMode1;
    this.emptyScientistMode2 = emptyScientistMode2;
    this.equalsButton = equalsButton;
    this.exponentButton = exponentButton;
    this.factorialButton = factorialButton;
    this.fiveButton = fiveButton;
    this.fourButton = fourButton;
    this.guideline1 = guideline1;
    this.guideline2 = guideline2;
    this.historyRecylcleView = historyRecylcleView;
    this.input = input;
    this.inputHorizontalScrollView = inputHorizontalScrollView;
    this.invButton = invButton;
    this.leftParenthesisButton = leftParenthesisButton;
    this.logarithmButton = logarithmButton;
    this.mainConstraintLayout = mainConstraintLayout;
    this.menuButton = menuButton;
    this.multiplyButton = multiplyButton;
    this.naturalLogarithmButton = naturalLogarithmButton;
    this.nineButton = nineButton;
    this.oneButton = oneButton;
    this.parenthesesButton = parenthesesButton;
    this.piButton = piButton;
    this.pointButton = pointButton;
    this.resultDisplay = resultDisplay;
    this.resultDisplayHorizontalScrollView = resultDisplayHorizontalScrollView;
    this.rightParenthesisButton = rightParenthesisButton;
    this.scientistModeRow2 = scientistModeRow2;
    this.scientistModeRow3 = scientistModeRow3;
    this.scientistModeSwitchButton = scientistModeSwitchButton;
    this.sevenButton = sevenButton;
    this.sineButton = sineButton;
    this.sixButton = sixButton;
    this.slidingLayout = slidingLayout;
    this.slidingLayoutButton = slidingLayoutButton;
    this.squareButton = squareButton;
    this.subtractButton = subtractButton;
    this.tableLayout = tableLayout;
    this.tangentButton = tangentButton;
    this.threeButton = threeButton;
    this.topBackground = topBackground;
    this.twoButton = twoButton;
    this.zeroButton = zeroButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addButton;
      Button addButton = ViewBindings.findChildViewById(rootView, id);
      if (addButton == null) {
        break missingId;
      }

      id = R.id.backspaceButton;
      ImageButton backspaceButton = ViewBindings.findChildViewById(rootView, id);
      if (backspaceButton == null) {
        break missingId;
      }

      id = R.id.clearButton;
      Button clearButton = ViewBindings.findChildViewById(rootView, id);
      if (clearButton == null) {
        break missingId;
      }

      id = R.id.constraintLayout2;
      ConstraintLayout constraintLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout2 == null) {
        break missingId;
      }

      id = R.id.constraintLayout3;
      ConstraintLayout constraintLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout3 == null) {
        break missingId;
      }

      id = R.id.cosineButton;
      Button cosineButton = ViewBindings.findChildViewById(rootView, id);
      if (cosineButton == null) {
        break missingId;
      }

      id = R.id.degreeButton;
      Button degreeButton = ViewBindings.findChildViewById(rootView, id);
      if (degreeButton == null) {
        break missingId;
      }

      id = R.id.degreeTextView;
      TextView degreeTextView = ViewBindings.findChildViewById(rootView, id);
      if (degreeTextView == null) {
        break missingId;
      }

      id = R.id.divideButton;
      Button divideButton = ViewBindings.findChildViewById(rootView, id);
      if (divideButton == null) {
        break missingId;
      }

      id = R.id.divideBy100Button;
      Button divideBy100Button = ViewBindings.findChildViewById(rootView, id);
      if (divideBy100Button == null) {
        break missingId;
      }

      id = R.id.eButton;
      Button eButton = ViewBindings.findChildViewById(rootView, id);
      if (eButton == null) {
        break missingId;
      }

      id = R.id.eightButton;
      Button eightButton = ViewBindings.findChildViewById(rootView, id);
      if (eightButton == null) {
        break missingId;
      }

      id = R.id.emptyScientistMode1;
      Space emptyScientistMode1 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.emptyScientistMode2;
      Space emptyScientistMode2 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.equalsButton;
      Button equalsButton = ViewBindings.findChildViewById(rootView, id);
      if (equalsButton == null) {
        break missingId;
      }

      id = R.id.exponentButton;
      ImageButton exponentButton = ViewBindings.findChildViewById(rootView, id);
      if (exponentButton == null) {
        break missingId;
      }

      id = R.id.factorialButton;
      Button factorialButton = ViewBindings.findChildViewById(rootView, id);
      if (factorialButton == null) {
        break missingId;
      }

      id = R.id.fiveButton;
      Button fiveButton = ViewBindings.findChildViewById(rootView, id);
      if (fiveButton == null) {
        break missingId;
      }

      id = R.id.fourButton;
      Button fourButton = ViewBindings.findChildViewById(rootView, id);
      if (fourButton == null) {
        break missingId;
      }

      id = R.id.guideline1;
      Guideline guideline1 = ViewBindings.findChildViewById(rootView, id);
      if (guideline1 == null) {
        break missingId;
      }

      id = R.id.guideline2;
      Guideline guideline2 = ViewBindings.findChildViewById(rootView, id);
      if (guideline2 == null) {
        break missingId;
      }

      id = R.id.history_recylcle_view;
      RecyclerView historyRecylcleView = ViewBindings.findChildViewById(rootView, id);
      if (historyRecylcleView == null) {
        break missingId;
      }

      id = R.id.input;
      EditText input = ViewBindings.findChildViewById(rootView, id);
      if (input == null) {
        break missingId;
      }

      id = R.id.inputHorizontalScrollView;
      HorizontalScrollView inputHorizontalScrollView = ViewBindings.findChildViewById(rootView, id);
      if (inputHorizontalScrollView == null) {
        break missingId;
      }

      id = R.id.invButton;
      Button invButton = ViewBindings.findChildViewById(rootView, id);
      if (invButton == null) {
        break missingId;
      }

      id = R.id.leftParenthesisButton;
      Button leftParenthesisButton = ViewBindings.findChildViewById(rootView, id);
      if (leftParenthesisButton == null) {
        break missingId;
      }

      id = R.id.logarithmButton;
      Button logarithmButton = ViewBindings.findChildViewById(rootView, id);
      if (logarithmButton == null) {
        break missingId;
      }

      ConstraintLayout mainConstraintLayout = (ConstraintLayout) rootView;

      id = R.id.menuButton;
      ImageButton menuButton = ViewBindings.findChildViewById(rootView, id);
      if (menuButton == null) {
        break missingId;
      }

      id = R.id.multiplyButton;
      Button multiplyButton = ViewBindings.findChildViewById(rootView, id);
      if (multiplyButton == null) {
        break missingId;
      }

      id = R.id.naturalLogarithmButton;
      Button naturalLogarithmButton = ViewBindings.findChildViewById(rootView, id);
      if (naturalLogarithmButton == null) {
        break missingId;
      }

      id = R.id.nineButton;
      Button nineButton = ViewBindings.findChildViewById(rootView, id);
      if (nineButton == null) {
        break missingId;
      }

      id = R.id.oneButton;
      Button oneButton = ViewBindings.findChildViewById(rootView, id);
      if (oneButton == null) {
        break missingId;
      }

      id = R.id.parenthesesButton;
      Button parenthesesButton = ViewBindings.findChildViewById(rootView, id);
      if (parenthesesButton == null) {
        break missingId;
      }

      id = R.id.piButton;
      Button piButton = ViewBindings.findChildViewById(rootView, id);
      if (piButton == null) {
        break missingId;
      }

      id = R.id.pointButton;
      ImageButton pointButton = ViewBindings.findChildViewById(rootView, id);
      if (pointButton == null) {
        break missingId;
      }

      id = R.id.resultDisplay;
      TextView resultDisplay = ViewBindings.findChildViewById(rootView, id);
      if (resultDisplay == null) {
        break missingId;
      }

      id = R.id.resultDisplayHorizontalScrollView;
      HorizontalScrollView resultDisplayHorizontalScrollView = ViewBindings.findChildViewById(rootView, id);
      if (resultDisplayHorizontalScrollView == null) {
        break missingId;
      }

      id = R.id.rightParenthesisButton;
      Button rightParenthesisButton = ViewBindings.findChildViewById(rootView, id);
      if (rightParenthesisButton == null) {
        break missingId;
      }

      id = R.id.scientistModeRow2;
      TableRow scientistModeRow2 = ViewBindings.findChildViewById(rootView, id);
      if (scientistModeRow2 == null) {
        break missingId;
      }

      id = R.id.scientistModeRow3;
      TableRow scientistModeRow3 = ViewBindings.findChildViewById(rootView, id);
      if (scientistModeRow3 == null) {
        break missingId;
      }

      id = R.id.scientistModeSwitchButton;
      ImageButton scientistModeSwitchButton = ViewBindings.findChildViewById(rootView, id);

      id = R.id.sevenButton;
      Button sevenButton = ViewBindings.findChildViewById(rootView, id);
      if (sevenButton == null) {
        break missingId;
      }

      id = R.id.sineButton;
      Button sineButton = ViewBindings.findChildViewById(rootView, id);
      if (sineButton == null) {
        break missingId;
      }

      id = R.id.sixButton;
      Button sixButton = ViewBindings.findChildViewById(rootView, id);
      if (sixButton == null) {
        break missingId;
      }

      id = R.id.sliding_layout;
      SlidingUpPanelLayout slidingLayout = ViewBindings.findChildViewById(rootView, id);
      if (slidingLayout == null) {
        break missingId;
      }

      id = R.id.sliding_layout_button;
      View slidingLayoutButton = ViewBindings.findChildViewById(rootView, id);
      if (slidingLayoutButton == null) {
        break missingId;
      }

      id = R.id.squareButton;
      Button squareButton = ViewBindings.findChildViewById(rootView, id);
      if (squareButton == null) {
        break missingId;
      }

      id = R.id.subtractButton;
      Button subtractButton = ViewBindings.findChildViewById(rootView, id);
      if (subtractButton == null) {
        break missingId;
      }

      id = R.id.tableLayout;
      TableLayout tableLayout = ViewBindings.findChildViewById(rootView, id);
      if (tableLayout == null) {
        break missingId;
      }

      id = R.id.tangentButton;
      Button tangentButton = ViewBindings.findChildViewById(rootView, id);
      if (tangentButton == null) {
        break missingId;
      }

      id = R.id.threeButton;
      Button threeButton = ViewBindings.findChildViewById(rootView, id);
      if (threeButton == null) {
        break missingId;
      }

      id = R.id.top_background;
      View topBackground = ViewBindings.findChildViewById(rootView, id);
      if (topBackground == null) {
        break missingId;
      }

      id = R.id.twoButton;
      Button twoButton = ViewBindings.findChildViewById(rootView, id);
      if (twoButton == null) {
        break missingId;
      }

      id = R.id.zeroButton;
      Button zeroButton = ViewBindings.findChildViewById(rootView, id);
      if (zeroButton == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, addButton, backspaceButton,
          clearButton, constraintLayout2, constraintLayout3, cosineButton, degreeButton,
          degreeTextView, divideButton, divideBy100Button, eButton, eightButton,
          emptyScientistMode1, emptyScientistMode2, equalsButton, exponentButton, factorialButton,
          fiveButton, fourButton, guideline1, guideline2, historyRecylcleView, input,
          inputHorizontalScrollView, invButton, leftParenthesisButton, logarithmButton,
          mainConstraintLayout, menuButton, multiplyButton, naturalLogarithmButton, nineButton,
          oneButton, parenthesesButton, piButton, pointButton, resultDisplay,
          resultDisplayHorizontalScrollView, rightParenthesisButton, scientistModeRow2,
          scientistModeRow3, scientistModeSwitchButton, sevenButton, sineButton, sixButton,
          slidingLayout, slidingLayoutButton, squareButton, subtractButton, tableLayout,
          tangentButton, threeButton, topBackground, twoButton, zeroButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
